!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
KNOT_POINT_H	knot_point.h	7;"	d
KnotPoint	knot_point.h	/^class KnotPoint {$/;"	c
KnotPoint::configuration_	knot_point.h	/^    geometry_msgs::Pose2D configuration_;$/;"	m	class:KnotPoint	access:public
MOTION_STATE_H	motion_state.h	2;"	d
MotionState	motion_state.h	/^class MotionState {$/;"	c
MotionState::a_	motion_state.h	/^    std::vector<float> a_;$/;"	m	class:MotionState	access:public
MotionState::p_	motion_state.h	/^    std::vector<float> p_;$/;"	m	class:MotionState	access:public
MotionState::v_	motion_state.h	/^    std::vector<float> v_;$/;"	m	class:MotionState	access:public
SEGMENT	segment.h	2;"	d
Segment	segment.cpp	/^Segment::Segment() : k_dof_(3) {}$/;"	f	class:Segment	signature:()
Segment	segment.h	/^    Segment();$/;"	p	class:Segment	access:public	signature:()
Segment	segment.h	/^class Segment {$/;"	c
Segment::Segment	segment.cpp	/^Segment::Segment() : k_dof_(3) {}$/;"	f	class:Segment	signature:()
Segment::Segment	segment.h	/^    Segment();$/;"	p	class:Segment	access:public	signature:()
Segment::a0_	segment.h	/^    std::vector<double> a0_; \/\/constant$/;"	m	class:Segment	access:public
Segment::a1_	segment.h	/^    std::vector<double> a1_; \/\/the slope$/;"	m	class:Segment	access:public
Segment::build	segment.cpp	/^void Segment::build(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind) {$/;"	f	class:Segment	signature:(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind)
Segment::build	segment.h	/^    void build(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind);$/;"	p	class:Segment	access:public	signature:(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind)
Segment::buildWork	segment.cpp	/^void Segment::buildWork() {$/;"	f	class:Segment	signature:()
Segment::buildWork	segment.h	/^    void buildWork();$/;"	p	class:Segment	access:private	signature:()
Segment::end_	segment.h	/^    MotionState end_;$/;"	m	class:Segment	access:public
Segment::end_t_	segment.h	/^    float end_t_;$/;"	m	class:Segment	access:public
Segment::index	segment.h	/^    int index; $/;"	m	class:Segment	access:public
Segment::k_dof_	segment.h	/^    unsigned int k_dof_;$/;"	m	class:Segment	access:private
Segment::start_	segment.h	/^    MotionState start_;$/;"	m	class:Segment	access:public
Segment::start_t_	segment.h	/^    float start_t_;$/;"	m	class:Segment	access:public
Segment::~Segment	segment.cpp	/^Segment::~Segment() {}$/;"	f	class:Segment	signature:()
Segment::~Segment	segment.h	/^    ~Segment();$/;"	p	class:Segment	access:public	signature:()
TRAJECTORY_H	trajectory.h	2;"	d
T_	trajectory.h	/^    std::vector<float>                  T_;$/;"	m	class:Trajectory	access:public
Trajectory	trajectory.cpp	/^Trajectory::Trajectory() : k_dof(3) {}$/;"	f	class:Trajectory	signature:()
Trajectory	trajectory.h	/^    Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory	trajectory.h	/^class Trajectory {$/;"	c
Trajectory::T_	trajectory.h	/^    std::vector<float>                  T_;$/;"	m	class:Trajectory	access:public
Trajectory::Trajectory	trajectory.cpp	/^Trajectory::Trajectory() : k_dof(3) {}$/;"	f	class:Trajectory	signature:()
Trajectory::Trajectory	trajectory.h	/^    Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory::buildSegments	trajectory.cpp	/^void Trajectory::buildSegments() {$/;"	f	class:Trajectory	signature:()
Trajectory::buildSegments	trajectory.h	/^    void buildSegments();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory::buildTrajectoryMsg	trajectory.cpp	/^trajectory_msgs::JointTrajectory Trajectory::buildTrajectoryMsg() {$/;"	f	class:Trajectory	signature:()
Trajectory::buildTrajectoryMsg	trajectory.h	/^    trajectory_msgs::JointTrajectory buildTrajectoryMsg();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory::generate	trajectory.cpp	/^std::vector<MotionState> Trajectory::generate() {$/;"	f	class:Trajectory	signature:()
Trajectory::generate	trajectory.h	/^    std::vector<MotionState> generate();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory::getMotionState	trajectory.cpp	/^MotionState Trajectory::getMotionState(unsigned int ind_segment, float t) {$/;"	f	class:Trajectory	signature:(unsigned int ind_segment, float t)
Trajectory::getMotionState	trajectory.h	/^    MotionState getMotionState(unsigned int ind_segment, float t);$/;"	p	class:Trajectory	access:private	signature:(unsigned int ind_segment, float t)
Trajectory::k_dof	trajectory.h	/^    const unsigned int k_dof;$/;"	m	class:Trajectory	access:private
Trajectory::knot_points_	trajectory.h	/^    std::vector<geometry_msgs::Pose2D>  knot_points_;$/;"	m	class:Trajectory	access:public
Trajectory::points_	trajectory.h	/^    std::vector<MotionState>            points_;$/;"	m	class:Trajectory	access:public
Trajectory::resolutionRate_	trajectory.h	/^    float resolutionRate_;  \/\/The resolution rate is specified in Hz$/;"	m	class:Trajectory	access:public
Trajectory::segments_	trajectory.h	/^    std::vector<Segment>                segments_;$/;"	m	class:Trajectory	access:public
Trajectory::~Trajectory	trajectory.cpp	/^Trajectory::~Trajectory() {}$/;"	f	class:Trajectory	signature:()
Trajectory::~Trajectory	trajectory.h	/^    ~Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
UTILITY_H	utility.h	2;"	d
Utility	utility.h	/^class Utility {$/;"	c
a0_	segment.h	/^    std::vector<double> a0_; \/\/constant$/;"	m	class:Segment	access:public
a1_	segment.h	/^    std::vector<double> a1_; \/\/the slope$/;"	m	class:Segment	access:public
a_	motion_state.h	/^    std::vector<float> a_;$/;"	m	class:MotionState	access:public
build	segment.cpp	/^void Segment::build(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind) {$/;"	f	class:Segment	signature:(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind)
build	segment.h	/^    void build(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind);$/;"	p	class:Segment	access:public	signature:(geometry_msgs::Pose2D kp_start, geometry_msgs::Pose2D kp_end, float t_start, float t_end, unsigned int ind)
buildSegments	trajectory.cpp	/^void Trajectory::buildSegments() {$/;"	f	class:Trajectory	signature:()
buildSegments	trajectory.h	/^    void buildSegments();$/;"	p	class:Trajectory	access:public	signature:()
buildTrajectoryMsg	trajectory.cpp	/^trajectory_msgs::JointTrajectory Trajectory::buildTrajectoryMsg() {$/;"	f	class:Trajectory	signature:()
buildTrajectoryMsg	trajectory.h	/^    trajectory_msgs::JointTrajectory buildTrajectoryMsg();$/;"	p	class:Trajectory	access:public	signature:()
buildWork	segment.cpp	/^void Segment::buildWork() {$/;"	f	class:Segment	signature:()
buildWork	segment.h	/^    void buildWork();$/;"	p	class:Segment	access:private	signature:()
configuration_	knot_point.h	/^    geometry_msgs::Pose2D configuration_;$/;"	m	class:KnotPoint	access:public
end_	segment.h	/^    MotionState end_;$/;"	m	class:Segment	access:public
end_t_	segment.h	/^    float end_t_;$/;"	m	class:Segment	access:public
generate	trajectory.cpp	/^std::vector<MotionState> Trajectory::generate() {$/;"	f	class:Trajectory	signature:()
generate	trajectory.h	/^    std::vector<MotionState> generate();$/;"	p	class:Trajectory	access:public	signature:()
getMotionState	trajectory.cpp	/^MotionState Trajectory::getMotionState(unsigned int ind_segment, float t) {$/;"	f	class:Trajectory	signature:(unsigned int ind_segment, float t)
getMotionState	trajectory.h	/^    MotionState getMotionState(unsigned int ind_segment, float t);$/;"	p	class:Trajectory	access:private	signature:(unsigned int ind_segment, float t)
index	segment.h	/^    int index; $/;"	m	class:Segment	access:public
k_dof	trajectory.h	/^    const unsigned int k_dof;$/;"	m	class:Trajectory	access:private
k_dof_	segment.h	/^    unsigned int k_dof_;$/;"	m	class:Segment	access:private
knot_points_	trajectory.h	/^    std::vector<geometry_msgs::Pose2D>  knot_points_;$/;"	m	class:Trajectory	access:public
main	main.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
p_	motion_state.h	/^    std::vector<float> p_;$/;"	m	class:MotionState	access:public
points_	trajectory.h	/^    std::vector<MotionState>            points_;$/;"	m	class:Trajectory	access:public
resolutionRate_	trajectory.h	/^    float resolutionRate_;  \/\/The resolution rate is specified in Hz$/;"	m	class:Trajectory	access:public
segments_	trajectory.h	/^    std::vector<Segment>                segments_;$/;"	m	class:Trajectory	access:public
start_	segment.h	/^    MotionState start_;$/;"	m	class:Segment	access:public
start_t_	segment.h	/^    float start_t_;$/;"	m	class:Segment	access:public
v_	motion_state.h	/^    std::vector<float> v_;$/;"	m	class:MotionState	access:public
~Segment	segment.cpp	/^Segment::~Segment() {}$/;"	f	class:Segment	signature:()
~Segment	segment.h	/^    ~Segment();$/;"	p	class:Segment	access:public	signature:()
~Trajectory	trajectory.cpp	/^Trajectory::~Trajectory() {}$/;"	f	class:Trajectory	signature:()
~Trajectory	trajectory.h	/^    ~Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
