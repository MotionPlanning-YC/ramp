!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
MOTION_STATE_H	motion_state.h	2;"	d
MotionState	motion_state.h	/^class MotionState {$/;"	c
MotionState::a_	motion_state.h	/^    std::vector<float> a_;$/;"	m	class:MotionState	access:public
MotionState::p_	motion_state.h	/^    std::vector<float> p_;$/;"	m	class:MotionState	access:public
MotionState::toString	motion_state.cpp	/^const std::string MotionState::toString() const {$/;"	f	class:MotionState	signature:() const
MotionState::toString	motion_state.h	/^    const std::string toString() const;$/;"	p	class:MotionState	access:public	signature:() const
MotionState::v_	motion_state.h	/^    std::vector<float> v_;$/;"	m	class:MotionState	access:public
SEGMENT	segment.h	2;"	d
Segment	segment.cpp	/^Segment::Segment() : k_dof_(3) {$/;"	f	class:Segment	signature:()
Segment	segment.cpp	/^Segment::Segment(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind) : k_dof_(3) $/;"	f	class:Segment	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
Segment	segment.h	/^    Segment();$/;"	p	class:Segment	access:public	signature:()
Segment	segment.h	/^    Segment(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind);$/;"	p	class:Segment	access:public	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
Segment	segment.h	/^class Segment {$/;"	c
Segment::Segment	segment.cpp	/^Segment::Segment() : k_dof_(3) {$/;"	f	class:Segment	signature:()
Segment::Segment	segment.cpp	/^Segment::Segment(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind) : k_dof_(3) $/;"	f	class:Segment	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
Segment::Segment	segment.h	/^    Segment();$/;"	p	class:Segment	access:public	signature:()
Segment::Segment	segment.h	/^    Segment(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind);$/;"	p	class:Segment	access:public	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
Segment::T_	segment.h	/^    std::vector<unsigned int> T_;$/;"	m	class:Segment	access:public
Segment::T_loc_	segment.h	/^    unsigned int T_loc_;$/;"	m	class:Segment	access:public
Segment::T_rotate_post_	segment.h	/^    unsigned int T_rotate_post_;$/;"	m	class:Segment	access:public
Segment::T_rotate_pre_	segment.h	/^    unsigned int T_rotate_pre_;$/;"	m	class:Segment	access:public
Segment::a0_	segment.h	/^    std::vector<double> a0_; \/\/ constant$/;"	m	class:Segment	access:public
Segment::a1_	segment.h	/^    std::vector<double> a1_; \/\/ the slope$/;"	m	class:Segment	access:public
Segment::build	segment.cpp	/^void Segment::build(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind) {$/;"	f	class:Segment	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
Segment::build	segment.h	/^    void build(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind);$/;"	p	class:Segment	access:public	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
Segment::buildWork	segment.cpp	/^void Segment::buildWork() {$/;"	f	class:Segment	signature:()
Segment::buildWork	segment.h	/^    void buildWork();$/;"	p	class:Segment	access:private	signature:()
Segment::calculateMinTime	segment.cpp	/^const std::vector<unsigned int> Segment::calculateMinTime() {$/;"	f	class:Segment	signature:()
Segment::calculateMinTime	segment.h	/^    const std::vector<unsigned int> calculateMinTime();$/;"	p	class:Segment	access:private	signature:()
Segment::end_	segment.h	/^    MotionState end_;$/;"	m	class:Segment	access:public
Segment::index_	segment.h	/^    int index_; $/;"	m	class:Segment	access:public
Segment::k_dof_	segment.h	/^    float k_dof_;$/;"	m	class:Segment	access:private
Segment::max_v_	segment.h	/^    std::vector<float> max_v_;$/;"	m	class:Segment	access:private
Segment::min_T_	segment.h	/^    unsigned int min_T_;$/;"	m	class:Segment	access:public
Segment::start_	segment.h	/^    MotionState start_;$/;"	m	class:Segment	access:public
Segment::toString	segment.cpp	/^const std::string Segment::toString() const {$/;"	f	class:Segment	signature:() const
Segment::toString	segment.h	/^    const std::string toString() const;$/;"	p	class:Segment	access:public	signature:() const
Segment::v_end_	segment.h	/^    float v_end_;$/;"	m	class:Segment	access:public
Segment::v_start_	segment.h	/^    float v_start_;$/;"	m	class:Segment	access:public
Segment::~Segment	segment.cpp	/^Segment::~Segment() {}$/;"	f	class:Segment	signature:()
Segment::~Segment	segment.h	/^    ~Segment();$/;"	p	class:Segment	access:public	signature:()
TRAJECTORY_H	trajectory.h	2;"	d
T_	segment.h	/^    std::vector<unsigned int> T_;$/;"	m	class:Segment	access:public
T_loc_	segment.h	/^    unsigned int T_loc_;$/;"	m	class:Segment	access:public
T_rotate_post_	segment.h	/^    unsigned int T_rotate_post_;$/;"	m	class:Segment	access:public
T_rotate_pre_	segment.h	/^    unsigned int T_rotate_pre_;$/;"	m	class:Segment	access:public
Trajectory	trajectory.cpp	/^Trajectory::Trajectory() : k_dof_(3) {}$/;"	f	class:Trajectory	signature:()
Trajectory	trajectory.cpp	/^Trajectory::Trajectory(const ramp_msgs::TrajectoryRequest::Request trajec_req) : k_dof_(3) {$/;"	f	class:Trajectory	signature:(const ramp_msgs::TrajectoryRequest::Request trajec_req)
Trajectory	trajectory.h	/^    Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory	trajectory.h	/^    Trajectory(const ramp_msgs::TrajectoryRequest::Request trajec_req);$/;"	p	class:Trajectory	access:public	signature:(const ramp_msgs::TrajectoryRequest::Request trajec_req)
Trajectory	trajectory.h	/^class Trajectory {$/;"	c
Trajectory::Trajectory	trajectory.cpp	/^Trajectory::Trajectory() : k_dof_(3) {}$/;"	f	class:Trajectory	signature:()
Trajectory::Trajectory	trajectory.cpp	/^Trajectory::Trajectory(const ramp_msgs::TrajectoryRequest::Request trajec_req) : k_dof_(3) {$/;"	f	class:Trajectory	signature:(const ramp_msgs::TrajectoryRequest::Request trajec_req)
Trajectory::Trajectory	trajectory.h	/^    Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory::Trajectory	trajectory.h	/^    Trajectory(const ramp_msgs::TrajectoryRequest::Request trajec_req);$/;"	p	class:Trajectory	access:public	signature:(const ramp_msgs::TrajectoryRequest::Request trajec_req)
Trajectory::buildSegments	trajectory.cpp	/^void Trajectory::buildSegments() {$/;"	f	class:Trajectory	signature:()
Trajectory::buildSegments	trajectory.h	/^    void  buildSegments();$/;"	p	class:Trajectory	access:private	signature:()
Trajectory::buildTrajectoryMsg	trajectory.cpp	/^const ramp_msgs::Trajectory Trajectory::buildTrajectoryMsg() const {$/;"	f	class:Trajectory	signature:() const
Trajectory::buildTrajectoryMsg	trajectory.h	/^    const ramp_msgs::Trajectory buildTrajectoryMsg() const;$/;"	p	class:Trajectory	access:public	signature:() const
Trajectory::generate	trajectory.cpp	/^const std::vector<MotionState> Trajectory::generate() {$/;"	f	class:Trajectory	signature:()
Trajectory::generate	trajectory.h	/^    const std::vector<MotionState> generate();$/;"	p	class:Trajectory	access:public	signature:()
Trajectory::getMotionState	trajectory.cpp	/^const MotionState Trajectory::getMotionState(const unsigned int ind_segment, const float t) {$/;"	f	class:Trajectory	signature:(const unsigned int ind_segment, const float t)
Trajectory::getMotionState	trajectory.h	/^    const MotionState getMotionState(const unsigned int ind_segment, const float t);$/;"	p	class:Trajectory	access:private	signature:(const unsigned int ind_segment, const float t)
Trajectory::k_dof_	trajectory.h	/^    const unsigned int k_dof_;$/;"	m	class:Trajectory	access:private
Trajectory::knot_points_	trajectory.h	/^    std::vector<geometry_msgs::Pose2D>  knot_points_;$/;"	m	class:Trajectory	access:public
Trajectory::points_	trajectory.h	/^    std::vector<MotionState>            points_;$/;"	m	class:Trajectory	access:public
Trajectory::resolutionRate_	trajectory.h	/^    unsigned int                        resolutionRate_;  \/\/The resolution rate is specified in Hz$/;"	m	class:Trajectory	access:public
Trajectory::segments_	trajectory.h	/^    std::vector<Segment>                segments_;$/;"	m	class:Trajectory	access:public
Trajectory::toString	trajectory.cpp	/^const std::string Trajectory::toString() const {$/;"	f	class:Trajectory	signature:() const
Trajectory::toString	trajectory.h	/^    const std::string toString() const;$/;"	p	class:Trajectory	access:public	signature:() const
Trajectory::u	trajectory.h	/^    Utility u;$/;"	m	class:Trajectory	access:private
Trajectory::v_end_	trajectory.h	/^    std::vector<float>                  v_end_;$/;"	m	class:Trajectory	access:public
Trajectory::v_start_	trajectory.h	/^    std::vector<float>                  v_start_;$/;"	m	class:Trajectory	access:public
Trajectory::~Trajectory	trajectory.cpp	/^Trajectory::~Trajectory() {}$/;"	f	class:Trajectory	signature:()
Trajectory::~Trajectory	trajectory.h	/^    ~Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
UTILITY_H	utility.h	2;"	d
Utility	utility.h	/^class Utility {$/;"	c
Utility::toString	utility.cpp	/^const std::string Utility::toString(const geometry_msgs::Pose2D p) const {$/;"	f	class:Utility	signature:(const geometry_msgs::Pose2D p) const
Utility::toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Path path) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Path path) const
Utility::toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Trajectory traj) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Trajectory traj) const
Utility::toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::TrajectoryRequest::Request tr) const {$/;"	f	class:Utility	signature:(const ramp_msgs::TrajectoryRequest::Request tr) const
Utility::toString	utility.h	/^    const std::string toString(const geometry_msgs::Pose2D p) const;$/;"	p	class:Utility	access:public	signature:(const geometry_msgs::Pose2D p) const
Utility::toString	utility.h	/^    const std::string toString(const ramp_msgs::Path p) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Path p) const
Utility::toString	utility.h	/^    const std::string toString(const ramp_msgs::Trajectory traj) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Trajectory traj) const
Utility::toString	utility.h	/^    const std::string toString(const ramp_msgs::TrajectoryRequest::Request tr) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::TrajectoryRequest::Request tr) const
a0_	segment.h	/^    std::vector<double> a0_; \/\/ constant$/;"	m	class:Segment	access:public
a1_	segment.h	/^    std::vector<double> a1_; \/\/ the slope$/;"	m	class:Segment	access:public
a_	motion_state.h	/^    std::vector<float> a_;$/;"	m	class:MotionState	access:public
build	segment.cpp	/^void Segment::build(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind) {$/;"	f	class:Segment	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
build	segment.h	/^    void build(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind);$/;"	p	class:Segment	access:public	signature:(const geometry_msgs::Pose2D kp_start, const geometry_msgs::Pose2D kp_end, const float v_start, const float v_end, const unsigned int ind)
buildSegments	trajectory.cpp	/^void Trajectory::buildSegments() {$/;"	f	class:Trajectory	signature:()
buildSegments	trajectory.h	/^    void  buildSegments();$/;"	p	class:Trajectory	access:private	signature:()
buildTrajectoryMsg	trajectory.cpp	/^const ramp_msgs::Trajectory Trajectory::buildTrajectoryMsg() const {$/;"	f	class:Trajectory	signature:() const
buildTrajectoryMsg	trajectory.h	/^    const ramp_msgs::Trajectory buildTrajectoryMsg() const;$/;"	p	class:Trajectory	access:public	signature:() const
buildWork	segment.cpp	/^void Segment::buildWork() {$/;"	f	class:Segment	signature:()
buildWork	segment.h	/^    void buildWork();$/;"	p	class:Segment	access:private	signature:()
calculateMinTime	segment.cpp	/^const std::vector<unsigned int> Segment::calculateMinTime() {$/;"	f	class:Segment	signature:()
calculateMinTime	segment.h	/^    const std::vector<unsigned int> calculateMinTime();$/;"	p	class:Segment	access:private	signature:()
end_	segment.h	/^    MotionState end_;$/;"	m	class:Segment	access:public
generate	trajectory.cpp	/^const std::vector<MotionState> Trajectory::generate() {$/;"	f	class:Trajectory	signature:()
generate	trajectory.h	/^    const std::vector<MotionState> generate();$/;"	p	class:Trajectory	access:public	signature:()
getMotionState	trajectory.cpp	/^const MotionState Trajectory::getMotionState(const unsigned int ind_segment, const float t) {$/;"	f	class:Trajectory	signature:(const unsigned int ind_segment, const float t)
getMotionState	trajectory.h	/^    const MotionState getMotionState(const unsigned int ind_segment, const float t);$/;"	p	class:Trajectory	access:private	signature:(const unsigned int ind_segment, const float t)
handleRequest	main.cpp	/^bool handleRequest(ramp_msgs::TrajectoryRequest::Request& req, $/;"	f	signature:(ramp_msgs::TrajectoryRequest::Request& req, ramp_msgs::TrajectoryRequest::Response& res)
index_	segment.h	/^    int index_; $/;"	m	class:Segment	access:public
k_dof_	segment.h	/^    float k_dof_;$/;"	m	class:Segment	access:private
k_dof_	trajectory.h	/^    const unsigned int k_dof_;$/;"	m	class:Trajectory	access:private
knot_points_	trajectory.h	/^    std::vector<geometry_msgs::Pose2D>  knot_points_;$/;"	m	class:Trajectory	access:public
main	main.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
max_v_	segment.h	/^    std::vector<float> max_v_;$/;"	m	class:Segment	access:private
min_T_	segment.h	/^    unsigned int min_T_;$/;"	m	class:Segment	access:public
p_	motion_state.h	/^    std::vector<float> p_;$/;"	m	class:MotionState	access:public
points_	trajectory.h	/^    std::vector<MotionState>            points_;$/;"	m	class:Trajectory	access:public
resolutionRate_	trajectory.h	/^    unsigned int                        resolutionRate_;  \/\/The resolution rate is specified in Hz$/;"	m	class:Trajectory	access:public
segments_	trajectory.h	/^    std::vector<Segment>                segments_;$/;"	m	class:Trajectory	access:public
start_	segment.h	/^    MotionState start_;$/;"	m	class:Segment	access:public
toString	motion_state.cpp	/^const std::string MotionState::toString() const {$/;"	f	class:MotionState	signature:() const
toString	motion_state.h	/^    const std::string toString() const;$/;"	p	class:MotionState	access:public	signature:() const
toString	segment.cpp	/^const std::string Segment::toString() const {$/;"	f	class:Segment	signature:() const
toString	segment.h	/^    const std::string toString() const;$/;"	p	class:Segment	access:public	signature:() const
toString	trajectory.cpp	/^const std::string Trajectory::toString() const {$/;"	f	class:Trajectory	signature:() const
toString	trajectory.h	/^    const std::string toString() const;$/;"	p	class:Trajectory	access:public	signature:() const
toString	utility.cpp	/^const std::string Utility::toString(const geometry_msgs::Pose2D p) const {$/;"	f	class:Utility	signature:(const geometry_msgs::Pose2D p) const
toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Path path) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Path path) const
toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Trajectory traj) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Trajectory traj) const
toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::TrajectoryRequest::Request tr) const {$/;"	f	class:Utility	signature:(const ramp_msgs::TrajectoryRequest::Request tr) const
toString	utility.h	/^    const std::string toString(const geometry_msgs::Pose2D p) const;$/;"	p	class:Utility	access:public	signature:(const geometry_msgs::Pose2D p) const
toString	utility.h	/^    const std::string toString(const ramp_msgs::Path p) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Path p) const
toString	utility.h	/^    const std::string toString(const ramp_msgs::Trajectory traj) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Trajectory traj) const
toString	utility.h	/^    const std::string toString(const ramp_msgs::TrajectoryRequest::Request tr) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::TrajectoryRequest::Request tr) const
u	main.cpp	/^Utility u;$/;"	v
u	trajectory.h	/^    Utility u;$/;"	m	class:Trajectory	access:private
v_	motion_state.h	/^    std::vector<float> v_;$/;"	m	class:MotionState	access:public
v_end_	segment.h	/^    float v_end_;$/;"	m	class:Segment	access:public
v_end_	trajectory.h	/^    std::vector<float>                  v_end_;$/;"	m	class:Trajectory	access:public
v_start_	segment.h	/^    float v_start_;$/;"	m	class:Segment	access:public
v_start_	trajectory.h	/^    std::vector<float>                  v_start_;$/;"	m	class:Trajectory	access:public
~Segment	segment.cpp	/^Segment::~Segment() {}$/;"	f	class:Segment	signature:()
~Segment	segment.h	/^    ~Segment();$/;"	p	class:Segment	access:public	signature:()
~Trajectory	trajectory.cpp	/^Trajectory::~Trajectory() {}$/;"	f	class:Trajectory	signature:()
~Trajectory	trajectory.h	/^    ~Trajectory();$/;"	p	class:Trajectory	access:public	signature:()
