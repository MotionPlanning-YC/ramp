!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Add	path.cpp	/^void Path::Add(const Configuration c) {$/;"	f	class:Path	signature:(const Configuration c)
Add	path.h	/^    void Add(const Configuration c);$/;"	p	class:Path	access:public	signature:(const Configuration c)
CONFIGURATION_H	configuration.h	2;"	d
CONTROL_HANDLER_H	control_handler.h	2;"	d
Configuration	configuration.cpp	/^Configuration::Configuration() {}$/;"	f	class:Configuration	signature:()
Configuration	configuration.cpp	/^Configuration::Configuration(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r) {$/;"	f	class:Configuration	signature:(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r)
Configuration	configuration.cpp	/^Configuration::Configuration(ramp_msgs::Configuration c) {$/;"	f	class:Configuration	signature:(ramp_msgs::Configuration c)
Configuration	configuration.h	/^    Configuration();$/;"	p	class:Configuration	access:public	signature:()
Configuration	configuration.h	/^    Configuration(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r);$/;"	p	class:Configuration	access:public	signature:(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r)
Configuration	configuration.h	/^    Configuration(ramp_msgs::Configuration c);$/;"	p	class:Configuration	access:public	signature:(ramp_msgs::Configuration c)
Configuration	configuration.h	/^class Configuration {$/;"	c
Configuration::Configuration	configuration.cpp	/^Configuration::Configuration() {}$/;"	f	class:Configuration	signature:()
Configuration::Configuration	configuration.cpp	/^Configuration::Configuration(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r) {$/;"	f	class:Configuration	signature:(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r)
Configuration::Configuration	configuration.cpp	/^Configuration::Configuration(ramp_msgs::Configuration c) {$/;"	f	class:Configuration	signature:(ramp_msgs::Configuration c)
Configuration::Configuration	configuration.h	/^    Configuration();$/;"	p	class:Configuration	access:public	signature:()
Configuration::Configuration	configuration.h	/^    Configuration(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r);$/;"	p	class:Configuration	access:public	signature:(const trajectory_msgs::JointTrajectoryPoint p, const std::vector<Range> r)
Configuration::Configuration	configuration.h	/^    Configuration(ramp_msgs::Configuration c);$/;"	p	class:Configuration	access:public	signature:(ramp_msgs::Configuration c)
Configuration::K_	configuration.h	/^    std::vector<float> K_; $/;"	m	class:Configuration	access:public
Configuration::buildConfigurationMsg	configuration.cpp	/^const ramp_msgs::Configuration Configuration::buildConfigurationMsg() const {$/;"	f	class:Configuration	signature:() const
Configuration::buildConfigurationMsg	configuration.h	/^    const ramp_msgs::Configuration buildConfigurationMsg() const;$/;"	p	class:Configuration	access:public	signature:() const
Configuration::compare	configuration.cpp	/^const double Configuration::compare(const Configuration& c) const {$/;"	f	class:Configuration	signature:(const Configuration& c) const
Configuration::compare	configuration.h	/^    const double compare(const Configuration& c) const;$/;"	p	class:Configuration	access:public	signature:(const Configuration& c) const
Configuration::equals	configuration.cpp	/^const bool Configuration::equals(const Configuration& c) const {$/;"	f	class:Configuration	signature:(const Configuration& c) const
Configuration::equals	configuration.h	/^    const bool equals(const Configuration& c) const; $/;"	p	class:Configuration	access:public	signature:(const Configuration& c) const
Configuration::random	configuration.cpp	/^void Configuration::random() {$/;"	f	class:Configuration	signature:()
Configuration::random	configuration.h	/^    void random();$/;"	p	class:Configuration	access:public	signature:()
Configuration::ranges_	configuration.h	/^    std::vector<Range> ranges_;$/;"	m	class:Configuration	access:public
Configuration::toString	configuration.cpp	/^const std::string Configuration::toString() const {$/;"	f	class:Configuration	signature:() const
Configuration::toString	configuration.h	/^    const std::string toString() const;$/;"	p	class:Configuration	access:public	signature:() const
Configuration::updatePosition	configuration.cpp	/^void Configuration::updatePosition(float x, float y, float theta)$/;"	f	class:Configuration	signature:(float x, float y, float theta)
Configuration::updatePosition	configuration.h	/^    void updatePosition(float x, float y, float theta);$/;"	p	class:Configuration	access:public	signature:(float x, float y, float theta)
Configuration::~Configuration	configuration.cpp	/^Configuration::~Configuration() {}$/;"	f	class:Configuration	signature:()
Configuration::~Configuration	configuration.h	/^    ~Configuration();$/;"	p	class:Configuration	access:public	signature:()
ControlHandler	control_handler.cpp	/^ControlHandler::ControlHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:ControlHandler	signature:(const ros::NodeHandle& h)
ControlHandler	control_handler.h	/^    ControlHandler(const ros::NodeHandle& h);$/;"	p	class:ControlHandler	access:public	signature:(const ros::NodeHandle& h)
ControlHandler	control_handler.h	/^class ControlHandler {$/;"	c
ControlHandler::ControlHandler	control_handler.cpp	/^ControlHandler::ControlHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:ControlHandler	signature:(const ros::NodeHandle& h)
ControlHandler::ControlHandler	control_handler.h	/^    ControlHandler(const ros::NodeHandle& h);$/;"	p	class:ControlHandler	access:public	signature:(const ros::NodeHandle& h)
ControlHandler::handle_	control_handler.h	/^    ros::NodeHandle handle_;$/;"	m	class:ControlHandler	access:private
ControlHandler::pub_bestTrajec_	control_handler.h	/^    ros::Publisher pub_bestTrajec_;$/;"	m	class:ControlHandler	access:private
ControlHandler::send	control_handler.cpp	/^void ControlHandler::send(ramp_msgs::Trajectory bestTrajec) {$/;"	f	class:ControlHandler	signature:(ramp_msgs::Trajectory bestTrajec)
ControlHandler::send	control_handler.h	/^    void send(ramp_msgs::Trajectory bestTrajec);$/;"	p	class:ControlHandler	access:public	signature:(ramp_msgs::Trajectory bestTrajec)
EVALUATION_REQUEST_HANDLER_H	evaluation_request_handler.h	2;"	d
EvaluationRequestHandler	evaluation_request_handler.cpp	/^EvaluationRequestHandler::EvaluationRequestHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:EvaluationRequestHandler	signature:(const ros::NodeHandle& h)
EvaluationRequestHandler	evaluation_request_handler.h	/^    EvaluationRequestHandler(const ros::NodeHandle& h);$/;"	p	class:EvaluationRequestHandler	access:public	signature:(const ros::NodeHandle& h)
EvaluationRequestHandler	evaluation_request_handler.h	/^class EvaluationRequestHandler {$/;"	c
EvaluationRequestHandler::EvaluationRequestHandler	evaluation_request_handler.cpp	/^EvaluationRequestHandler::EvaluationRequestHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:EvaluationRequestHandler	signature:(const ros::NodeHandle& h)
EvaluationRequestHandler::EvaluationRequestHandler	evaluation_request_handler.h	/^    EvaluationRequestHandler(const ros::NodeHandle& h);$/;"	p	class:EvaluationRequestHandler	access:public	signature:(const ros::NodeHandle& h)
EvaluationRequestHandler::client_	evaluation_request_handler.h	/^    ros::ServiceClient client_;$/;"	m	class:EvaluationRequestHandler	access:private
EvaluationRequestHandler::handle_	evaluation_request_handler.h	/^    ros::NodeHandle handle_;$/;"	m	class:EvaluationRequestHandler	access:private
EvaluationRequestHandler::request	evaluation_request_handler.cpp	/^const bool EvaluationRequestHandler::request(ramp_msgs::EvaluationRequest& er) {$/;"	f	class:EvaluationRequestHandler	signature:(ramp_msgs::EvaluationRequest& er)
EvaluationRequestHandler::request	evaluation_request_handler.h	/^    const bool request(ramp_msgs::EvaluationRequest& er);$/;"	p	class:EvaluationRequestHandler	access:public	signature:(ramp_msgs::EvaluationRequest& er)
K_	configuration.h	/^    std::vector<float> K_; $/;"	m	class:Configuration	access:public
MODIFICATION_REQUEST_HANDLER_H	modification_request_handler.h	2;"	d
MODIFIER_H	modifier.h	2;"	d
ModificationRequestHandler	modification_request_handler.cpp	/^ModificationRequestHandler::ModificationRequestHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:ModificationRequestHandler	signature:(const ros::NodeHandle& h)
ModificationRequestHandler	modification_request_handler.h	/^    ModificationRequestHandler(const ros::NodeHandle& h);$/;"	p	class:ModificationRequestHandler	access:public	signature:(const ros::NodeHandle& h)
ModificationRequestHandler	modification_request_handler.h	/^class ModificationRequestHandler {$/;"	c
ModificationRequestHandler::ModificationRequestHandler	modification_request_handler.cpp	/^ModificationRequestHandler::ModificationRequestHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:ModificationRequestHandler	signature:(const ros::NodeHandle& h)
ModificationRequestHandler::ModificationRequestHandler	modification_request_handler.h	/^    ModificationRequestHandler(const ros::NodeHandle& h);$/;"	p	class:ModificationRequestHandler	access:public	signature:(const ros::NodeHandle& h)
ModificationRequestHandler::client_	modification_request_handler.h	/^    ros::ServiceClient client_;$/;"	m	class:ModificationRequestHandler	access:private
ModificationRequestHandler::handle_	modification_request_handler.h	/^    ros::NodeHandle handle_;$/;"	m	class:ModificationRequestHandler	access:private
ModificationRequestHandler::request	modification_request_handler.cpp	/^const bool ModificationRequestHandler::request(ramp_msgs::ModificationRequest& mr) {$/;"	f	class:ModificationRequestHandler	signature:(ramp_msgs::ModificationRequest& mr)
ModificationRequestHandler::request	modification_request_handler.h	/^    const bool request(ramp_msgs::ModificationRequest& mr);   $/;"	p	class:ModificationRequestHandler	access:public	signature:(ramp_msgs::ModificationRequest& mr)
ModifiedTrajectory	planner.h	/^struct ModifiedTrajectory {$/;"	s
ModifiedTrajectory::trajec_	planner.h	/^  RampTrajectory trajec_;$/;"	m	struct:ModifiedTrajectory	access:public
ModifiedTrajectory::velocities_	planner.h	/^  std::vector<float> velocities_;$/;"	m	struct:ModifiedTrajectory	access:public
Modifier	modifier.cpp	/^Modifier::Modifier(const ros::NodeHandle& h) : num_ops(5), i_changed1(-1), i_changed2(-1) {$/;"	f	class:Modifier	signature:(const ros::NodeHandle& h)
Modifier	modifier.cpp	/^Modifier::Modifier(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs) : num_ops(5), paths_(ps), velocities_(vs), i_changed1(-1), i_changed2(-1) {$/;"	f	class:Modifier	signature:(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs)
Modifier	modifier.h	/^    Modifier(const ros::NodeHandle& h);$/;"	p	class:Modifier	access:public	signature:(const ros::NodeHandle& h)
Modifier	modifier.h	/^    Modifier(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs);    $/;"	p	class:Modifier	access:public	signature:(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs)
Modifier	modifier.h	/^class Modifier {$/;"	c
Modifier::Modifier	modifier.cpp	/^Modifier::Modifier(const ros::NodeHandle& h) : num_ops(5), i_changed1(-1), i_changed2(-1) {$/;"	f	class:Modifier	signature:(const ros::NodeHandle& h)
Modifier::Modifier	modifier.cpp	/^Modifier::Modifier(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs) : num_ops(5), paths_(ps), velocities_(vs), i_changed1(-1), i_changed2(-1) {$/;"	f	class:Modifier	signature:(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs)
Modifier::Modifier	modifier.h	/^    Modifier(const ros::NodeHandle& h);$/;"	p	class:Modifier	access:public	signature:(const ros::NodeHandle& h)
Modifier::Modifier	modifier.h	/^    Modifier(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs);    $/;"	p	class:Modifier	access:public	signature:(const ros::NodeHandle& h, const std::vector<Path> ps, const std::vector< std::vector<float> > vs)
Modifier::buildModificationRequest	modifier.cpp	/^const ramp_msgs::ModificationRequest Modifier::buildModificationRequest() {$/;"	f	class:Modifier	signature:()
Modifier::buildModificationRequest	modifier.h	/^    const ramp_msgs::ModificationRequest buildModificationRequest();$/;"	p	class:Modifier	access:public	signature:()
Modifier::h_mod_req_	modifier.h	/^    ModificationRequestHandler* h_mod_req_;$/;"	m	class:Modifier	access:private
Modifier::i_changed1	modifier.h	/^    int i_changed1;$/;"	m	class:Modifier	access:public
Modifier::i_changed2	modifier.h	/^    int i_changed2;$/;"	m	class:Modifier	access:public
Modifier::mod_op	modifier.h	/^    unsigned int mod_op;$/;"	m	class:Modifier	access:private
Modifier::new_velocities_	modifier.h	/^    std::vector< std::vector<float> > new_velocities_;$/;"	m	class:Modifier	access:public
Modifier::num_ops	modifier.h	/^    unsigned int num_ops;$/;"	m	class:Modifier	access:private
Modifier::paths_	modifier.h	/^    std::vector<Path> paths_;$/;"	m	class:Modifier	access:public
Modifier::perform	modifier.cpp	/^const std::vector<Path> Modifier::perform() {$/;"	f	class:Modifier	signature:()
Modifier::perform	modifier.h	/^    const std::vector<Path> perform();$/;"	p	class:Modifier	access:public	signature:()
Modifier::u	modifier.h	/^    Utility u;$/;"	m	class:Modifier	access:private
Modifier::update	modifier.cpp	/^void Modifier::update(const Path p, const unsigned int i) {$/;"	f	class:Modifier	signature:(const Path p, const unsigned int i)
Modifier::update	modifier.h	/^    void update(const Path p, const unsigned int i);$/;"	p	class:Modifier	access:public	signature:(const Path p, const unsigned int i)
Modifier::updateAll	modifier.cpp	/^void Modifier::updateAll(std::vector<Path> ps, std::vector< std::vector<float> > vs) {$/;"	f	class:Modifier	signature:(std::vector<Path> ps, std::vector< std::vector<float> > vs)
Modifier::updateAll	modifier.h	/^    void updateAll(const std::vector<Path> ps, std::vector< std::vector<float> > vs);$/;"	p	class:Modifier	access:public	signature:(const std::vector<Path> ps, std::vector< std::vector<float> > vs)
Modifier::velocities_	modifier.h	/^    std::vector< std::vector<float> > velocities_;$/;"	m	class:Modifier	access:public
Modifier::~Modifier	modifier.cpp	/^Modifier::~Modifier() {$/;"	f	class:Modifier	signature:()
Modifier::~Modifier	modifier.h	/^    ~Modifier();$/;"	p	class:Modifier	access:public	signature:()
PATH_H	path.h	2;"	d
PLANNER_H	planner.h	2;"	d
POPULATION_H	population.h	2;"	d
Path	path.cpp	/^Path::Path() {}$/;"	f	class:Path	signature:()
Path	path.cpp	/^Path::Path(Configuration start, Configuration goal) : start_(start), goal_(goal) {$/;"	f	class:Path	signature:(Configuration start, Configuration goal)
Path	path.cpp	/^Path::Path(ramp_msgs::Path p) {$/;"	f	class:Path	signature:(ramp_msgs::Path p)
Path	path.cpp	/^Path::Path(std::vector<Configuration> all) {$/;"	f	class:Path	signature:(std::vector<Configuration> all)
Path	path.h	/^    Path();$/;"	p	class:Path	access:public	signature:()
Path	path.h	/^    Path(Configuration start, Configuration goal);$/;"	p	class:Path	access:public	signature:(Configuration start, Configuration goal)
Path	path.h	/^    Path(ramp_msgs::Path p);$/;"	p	class:Path	access:public	signature:(ramp_msgs::Path p)
Path	path.h	/^    Path(std::vector<Configuration> all);$/;"	p	class:Path	access:public	signature:(std::vector<Configuration> all)
Path	path.h	/^class Path {$/;"	c
Path::Add	path.cpp	/^void Path::Add(const Configuration c) {$/;"	f	class:Path	signature:(const Configuration c)
Path::Add	path.h	/^    void Add(const Configuration c);$/;"	p	class:Path	access:public	signature:(const Configuration c)
Path::Path	path.cpp	/^Path::Path() {}$/;"	f	class:Path	signature:()
Path::Path	path.cpp	/^Path::Path(Configuration start, Configuration goal) : start_(start), goal_(goal) {$/;"	f	class:Path	signature:(Configuration start, Configuration goal)
Path::Path	path.cpp	/^Path::Path(ramp_msgs::Path p) {$/;"	f	class:Path	signature:(ramp_msgs::Path p)
Path::Path	path.cpp	/^Path::Path(std::vector<Configuration> all) {$/;"	f	class:Path	signature:(std::vector<Configuration> all)
Path::Path	path.h	/^    Path();$/;"	p	class:Path	access:public	signature:()
Path::Path	path.h	/^    Path(Configuration start, Configuration goal);$/;"	p	class:Path	access:public	signature:(Configuration start, Configuration goal)
Path::Path	path.h	/^    Path(ramp_msgs::Path p);$/;"	p	class:Path	access:public	signature:(ramp_msgs::Path p)
Path::Path	path.h	/^    Path(std::vector<Configuration> all);$/;"	p	class:Path	access:public	signature:(std::vector<Configuration> all)
Path::all_	path.h	/^    std::vector<Configuration> all_;$/;"	m	class:Path	access:public
Path::buildPathMsg	path.cpp	/^const ramp_msgs::Path Path::buildPathMsg() const {$/;"	f	class:Path	signature:() const
Path::buildPathMsg	path.h	/^    const ramp_msgs::Path buildPathMsg() const; $/;"	p	class:Path	access:public	signature:() const
Path::goal_	path.h	/^    Configuration goal_;$/;"	m	class:Path	access:public
Path::size	path.cpp	/^const unsigned int Path::size() const { return all_.size(); }$/;"	f	class:Path	signature:() const
Path::size	path.h	/^    const unsigned int size() const;$/;"	p	class:Path	access:public	signature:() const
Path::start_	path.h	/^    Configuration start_;$/;"	m	class:Path	access:public
Path::toString	path.cpp	/^const std::string Path::toString() const {$/;"	f	class:Path	signature:() const
Path::toString	path.h	/^    const std::string toString() const;$/;"	p	class:Path	access:public	signature:() const
Path::~Path	path.cpp	/^Path::~Path() {}$/;"	f	class:Path	signature:()
Path::~Path	path.h	/^    ~Path();$/;"	p	class:Path	access:public	signature:()
Planner	planner.cpp	/^Planner::Planner() : resolutionRate_(5), populationSize_(7), generation_(0), h_traj_req_(0), h_eval_req_(0), h_control_(0), modifier_(0), mutex_start_(true) $/;"	f	class:Planner	signature:()
Planner	planner.cpp	/^Planner::Planner(const ros::NodeHandle& h) : resolutionRate_(5), populationSize_(7), generation_(0), mutex_start_(true) $/;"	f	class:Planner	signature:(const ros::NodeHandle& h)
Planner	planner.cpp	/^Planner::Planner(const unsigned int r, const int p) : resolutionRate_(r), populationSize_(p), h_traj_req_(0), h_eval_req_(0), h_control_(0), modifier_(0), mutex_start_(true) $/;"	f	class:Planner	signature:(const unsigned int r, const int p)
Planner	planner.h	/^    Planner();$/;"	p	class:Planner	access:public	signature:()
Planner	planner.h	/^    Planner(const ros::NodeHandle& h);$/;"	p	class:Planner	access:public	signature:(const ros::NodeHandle& h)
Planner	planner.h	/^    Planner(const unsigned int r, const int p);$/;"	p	class:Planner	access:public	signature:(const unsigned int r, const int p)
Planner	planner.h	/^class Planner {$/;"	c
Planner::Planner	planner.cpp	/^Planner::Planner() : resolutionRate_(5), populationSize_(7), generation_(0), h_traj_req_(0), h_eval_req_(0), h_control_(0), modifier_(0), mutex_start_(true) $/;"	f	class:Planner	signature:()
Planner::Planner	planner.cpp	/^Planner::Planner(const ros::NodeHandle& h) : resolutionRate_(5), populationSize_(7), generation_(0), mutex_start_(true) $/;"	f	class:Planner	signature:(const ros::NodeHandle& h)
Planner::Planner	planner.cpp	/^Planner::Planner(const unsigned int r, const int p) : resolutionRate_(r), populationSize_(p), h_traj_req_(0), h_eval_req_(0), h_control_(0), modifier_(0), mutex_start_(true) $/;"	f	class:Planner	signature:(const unsigned int r, const int p)
Planner::Planner	planner.h	/^    Planner();$/;"	p	class:Planner	access:public	signature:()
Planner::Planner	planner.h	/^    Planner(const ros::NodeHandle& h);$/;"	p	class:Planner	access:public	signature:(const ros::NodeHandle& h)
Planner::Planner	planner.h	/^    Planner(const unsigned int r, const int p);$/;"	p	class:Planner	access:public	signature:(const unsigned int r, const int p)
Planner::bestTrajec_	planner.h	/^    RampTrajectory bestTrajec_;$/;"	m	class:Planner	access:public
Planner::buildEvaluationRequest	planner.cpp	/^const ramp_msgs::EvaluationRequest Planner::buildEvaluationRequest(const RampTrajectory trajec, const std::vector<unsigned int> i_segments) {$/;"	f	class:Planner	signature:(const RampTrajectory trajec, const std::vector<unsigned int> i_segments)
Planner::buildEvaluationRequest	planner.cpp	/^const ramp_msgs::EvaluationRequest Planner::buildEvaluationRequest(const unsigned int i_trajec, const std::vector<unsigned int> i_segments) {$/;"	f	class:Planner	signature:(const unsigned int i_trajec, const std::vector<unsigned int> i_segments)
Planner::buildEvaluationRequest	planner.h	/^    const ramp_msgs::EvaluationRequest buildEvaluationRequest(const RampTrajectory trajec, const std::vector<unsigned int> i_segments);$/;"	p	class:Planner	access:public	signature:(const RampTrajectory trajec, const std::vector<unsigned int> i_segments)
Planner::buildEvaluationRequest	planner.h	/^    const ramp_msgs::EvaluationRequest buildEvaluationRequest(const unsigned int i_path, const std::vector<unsigned int> i_segments);$/;"	p	class:Planner	access:public	signature:(const unsigned int i_path, const std::vector<unsigned int> i_segments)
Planner::buildTrajectoryRequest	planner.cpp	/^const ramp_msgs::TrajectoryRequest Planner::buildTrajectoryRequest(const Path path, const std::vector<float> v_s, const std::vector<float> v_e ) const {$/;"	f	class:Planner	signature:(const Path path, const std::vector<float> v_s, const std::vector<float> v_e ) const
Planner::buildTrajectoryRequest	planner.cpp	/^const ramp_msgs::TrajectoryRequest Planner::buildTrajectoryRequest(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const {$/;"	f	class:Planner	signature:(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const
Planner::buildTrajectoryRequest	planner.h	/^    const ramp_msgs::TrajectoryRequest buildTrajectoryRequest(const Path path, const std::vector<float> v_s, const std::vector<float> v_e) const;$/;"	p	class:Planner	access:public	signature:(const Path path, const std::vector<float> v_s, const std::vector<float> v_e) const
Planner::buildTrajectoryRequest	planner.h	/^    const ramp_msgs::TrajectoryRequest buildTrajectoryRequest(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const;$/;"	p	class:Planner	access:public	signature:(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const
Planner::controlCycleCallback	planner.cpp	/^void Planner::controlCycleCallback(const ros::TimerEvent& t) {$/;"	f	class:Planner	signature:(const ros::TimerEvent& t)
Planner::controlCycleCallback	planner.h	/^    void controlCycleCallback(const ros::TimerEvent& t);$/;"	p	class:Planner	access:public	signature:(const ros::TimerEvent& t)
Planner::controlCycle_	planner.h	/^    ros::Duration controlCycle_;$/;"	m	class:Planner	access:public
Planner::evaluateAndObtainBest	planner.cpp	/^const RampTrajectory Planner::evaluateAndObtainBest() {$/;"	f	class:Planner	signature:()
Planner::evaluateAndObtainBest	planner.h	/^    const RampTrajectory evaluateAndObtainBest();$/;"	p	class:Planner	access:public	signature:()
Planner::evaluatePopulation	planner.cpp	/^void Planner::evaluatePopulation() {$/;"	f	class:Planner	signature:()
Planner::evaluatePopulation	planner.h	/^    void evaluatePopulation();$/;"	p	class:Planner	access:public	signature:()
Planner::evaluateTrajectory	planner.cpp	/^void Planner::evaluateTrajectory(RampTrajectory& trajec, const std::vector<unsigned int> i_segments) {$/;"	f	class:Planner	signature:(RampTrajectory& trajec, const std::vector<unsigned int> i_segments)
Planner::evaluateTrajectory	planner.h	/^    void evaluateTrajectory(RampTrajectory& trajec, const std::vector<unsigned int> i_segments);$/;"	p	class:Planner	access:public	signature:(RampTrajectory& trajec, const std::vector<unsigned int> i_segments)
Planner::generation_	planner.h	/^    unsigned int generation_;$/;"	m	class:Planner	access:private
Planner::getNewVelocities	planner.cpp	/^const std::vector< std::vector<float> > Planner::getNewVelocities(std::vector<Path> new_paths, std::vector<int> i_old) {$/;"	f	class:Planner	signature:(std::vector<Path> new_paths, std::vector<int> i_old)
Planner::getNewVelocities	planner.h	/^    const std::vector< std::vector<float> > getNewVelocities(std::vector<Path> new_path, std::vector<int> i_old);$/;"	p	class:Planner	access:private	signature:(std::vector<Path> new_path, std::vector<int> i_old)
Planner::getStartConfiguration	planner.cpp	/^Configuration Planner::getStartConfiguration() {$/;"	f	class:Planner	signature:()
Planner::getStartConfiguration	planner.h	/^    Configuration getStartConfiguration();$/;"	p	class:Planner	access:public	signature:()
Planner::go	planner.cpp	/^ void Planner::go() {$/;"	f	class:Planner	signature:()
Planner::go	planner.h	/^    void go();$/;"	p	class:Planner	access:public	signature:()
Planner::goal_	planner.h	/^    Configuration goal_;$/;"	m	class:Planner	access:public
Planner::h_control_	planner.h	/^    ControlHandler*             h_control_;$/;"	m	class:Planner	access:private
Planner::h_eval_req_	planner.h	/^    EvaluationRequestHandler*   h_eval_req_;$/;"	m	class:Planner	access:private
Planner::h_traj_req_	planner.h	/^    TrajectoryRequestHandler*   h_traj_req_;$/;"	m	class:Planner	access:private
Planner::init	planner.cpp	/^void Planner::init(const ros::NodeHandle& h) {$/;"	f	class:Planner	signature:(const ros::NodeHandle& h)
Planner::init	planner.h	/^    void init(const ros::NodeHandle& h);$/;"	p	class:Planner	access:public	signature:(const ros::NodeHandle& h)
Planner::init_population	planner.cpp	/^void Planner::init_population() { $/;"	f	class:Planner	signature:()
Planner::init_population	planner.h	/^    void init_population();$/;"	p	class:Planner	access:public	signature:()
Planner::lastUpdate_	planner.h	/^    ros::Time lastUpdate_;$/;"	m	class:Planner	access:private
Planner::modification	planner.cpp	/^void Planner::modification() {$/;"	f	class:Planner	signature:()
Planner::modification	planner.h	/^    void modification();$/;"	p	class:Planner	access:private	signature:()
Planner::modifier_	planner.h	/^    Modifier* modifier_;$/;"	m	class:Planner	access:private
Planner::modifyPath	planner.cpp	/^const std::vector<Path> Planner::modifyPath() { $/;"	f	class:Planner	signature:()
Planner::modifyPath	planner.h	/^    const std::vector<Path> modifyPath();$/;"	p	class:Planner	access:public	signature:()
Planner::modifyTrajec	planner.cpp	/^const std::vector<ModifiedTrajectory> Planner::modifyTrajec() {$/;"	f	class:Planner	signature:()
Planner::modifyTrajec	planner.h	/^    const std::vector<ModifiedTrajectory> modifyTrajec();$/;"	p	class:Planner	access:public	signature:()
Planner::mutex_start_	planner.h	/^    bool mutex_start_;$/;"	m	class:Planner	access:private
Planner::paths_	planner.h	/^    std::vector<Path>                   paths_;$/;"	m	class:Planner	access:public
Planner::populationSize_	planner.h	/^    const int populationSize_;$/;"	m	class:Planner	access:private
Planner::population_	planner.h	/^    Population population_;$/;"	m	class:Planner	access:public
Planner::ranges_	planner.h	/^    std::vector<Range> ranges_;$/;"	m	class:Planner	access:public
Planner::requestEvaluation	planner.cpp	/^const bool Planner::requestEvaluation(ramp_msgs::EvaluationRequest& er) {$/;"	f	class:Planner	signature:(ramp_msgs::EvaluationRequest& er)
Planner::requestEvaluation	planner.h	/^    const bool requestEvaluation(ramp_msgs::EvaluationRequest& er);$/;"	p	class:Planner	access:public	signature:(ramp_msgs::EvaluationRequest& er)
Planner::requestTrajectory	planner.cpp	/^const bool Planner::requestTrajectory(ramp_msgs::TrajectoryRequest& tr) {$/;"	f	class:Planner	signature:(ramp_msgs::TrajectoryRequest& tr)
Planner::requestTrajectory	planner.h	/^    const bool requestTrajectory(ramp_msgs::TrajectoryRequest& tr);$/;"	p	class:Planner	access:public	signature:(ramp_msgs::TrajectoryRequest& tr)
Planner::resolutionRate_	planner.h	/^    const unsigned int resolutionRate_;$/;"	m	class:Planner	access:public
Planner::sendBest	planner.cpp	/^void Planner::sendBest() {$/;"	f	class:Planner	signature:()
Planner::sendBest	planner.h	/^    void sendBest();$/;"	p	class:Planner	access:public	signature:()
Planner::start_	planner.h	/^    Configuration start_;$/;"	m	class:Planner	access:public
Planner::timer_	planner.h	/^    ros::Timer timer_;$/;"	m	class:Planner	access:public
Planner::u	planner.h	/^    Utility u; $/;"	m	class:Planner	access:private
Planner::updateCallback	planner.cpp	/^void Planner::updateCallback(const ramp_msgs::Update::ConstPtr& msg) {$/;"	f	class:Planner	signature:(const ramp_msgs::Update::ConstPtr& msg)
Planner::updateCallback	planner.h	/^    void updateCallback(const ramp_msgs::Update::ConstPtr& msg);$/;"	p	class:Planner	access:public	signature:(const ramp_msgs::Update::ConstPtr& msg)
Planner::updatePaths	planner.cpp	/^void Planner::updatePaths(Configuration start, ros::Duration dur) {$/;"	f	class:Planner	signature:(Configuration start, ros::Duration dur)
Planner::updatePaths	planner.h	/^    void updatePaths(Configuration start, ros::Duration dur);$/;"	p	class:Planner	access:private	signature:(Configuration start, ros::Duration dur)
Planner::updatePopulation	planner.cpp	/^void Planner::updatePopulation(ros::Duration d) {$/;"	f	class:Planner	signature:(ros::Duration d)
Planner::updatePopulation	planner.h	/^    void updatePopulation(ros::Duration d);$/;"	p	class:Planner	access:public	signature:(ros::Duration d)
Planner::velocities_	planner.h	/^    std::vector<std::vector<float> >    velocities_;$/;"	m	class:Planner	access:public
Planner::~Planner	planner.cpp	/^Planner::~Planner() {$/;"	f	class:Planner	signature:()
Planner::~Planner	planner.h	/^    ~Planner();$/;"	p	class:Planner	access:public	signature:()
Population	population.cpp	/^Population::Population() : max_size(7), i_best(0) {}$/;"	f	class:Population	signature:()
Population	population.cpp	/^Population::Population(const unsigned int size) : max_size(size), i_best(0) {}$/;"	f	class:Population	signature:(const unsigned int size)
Population	population.h	/^    Population();$/;"	p	class:Population	access:public	signature:()
Population	population.h	/^    Population(const unsigned int size);$/;"	p	class:Population	access:public	signature:(const unsigned int size)
Population	population.h	/^class Population {$/;"	c
Population::Population	population.cpp	/^Population::Population() : max_size(7), i_best(0) {}$/;"	f	class:Population	signature:()
Population::Population	population.cpp	/^Population::Population(const unsigned int size) : max_size(size), i_best(0) {}$/;"	f	class:Population	signature:(const unsigned int size)
Population::Population	population.h	/^    Population();$/;"	p	class:Population	access:public	signature:()
Population::Population	population.h	/^    Population(const unsigned int size);$/;"	p	class:Population	access:public	signature:(const unsigned int size)
Population::add	population.cpp	/^const unsigned int Population::add(const RampTrajectory rt) {$/;"	f	class:Population	signature:(const RampTrajectory rt)
Population::add	population.h	/^    const unsigned int  add(const RampTrajectory rt);$/;"	p	class:Population	access:public	signature:(const RampTrajectory rt)
Population::clear	population.cpp	/^void Population::clear() { population_.clear(); }$/;"	f	class:Population	signature:()
Population::clear	population.h	/^    void clear();$/;"	p	class:Population	access:public	signature:()
Population::findBest	population.cpp	/^const RampTrajectory Population::findBest() {$/;"	f	class:Population	signature:()
Population::findBest	population.h	/^    const RampTrajectory findBest();$/;"	p	class:Population	access:public	signature:()
Population::fitnessFeasibleToString	population.cpp	/^const std::string Population::fitnessFeasibleToString() const {$/;"	f	class:Population	signature:() const
Population::fitnessFeasibleToString	population.h	/^    const std::string fitnessFeasibleToString() const;$/;"	p	class:Population	access:public	signature:() const
Population::i_best	population.h	/^    unsigned int i_best;$/;"	m	class:Population	access:private
Population::max_size	population.h	/^    const unsigned int max_size;$/;"	m	class:Population	access:private
Population::population_	population.h	/^    std::vector<RampTrajectory> population_;$/;"	m	class:Population	access:public
Population::replaceAll	population.cpp	/^const bool Population::replaceAll(const std::vector<RampTrajectory> new_pop) {$/;"	f	class:Population	signature:(const std::vector<RampTrajectory> new_pop)
Population::replaceAll	population.h	/^    const bool replaceAll(const std::vector<RampTrajectory> new_pop);$/;"	p	class:Population	access:public	signature:(const std::vector<RampTrajectory> new_pop)
Population::size	population.cpp	/^const unsigned int Population::size() const { return population_.size(); }$/;"	f	class:Population	signature:() const
Population::size	population.h	/^    const unsigned int size() const;$/;"	p	class:Population	access:public	signature:() const
Population::toString	population.cpp	/^const std::string Population::toString() const {$/;"	f	class:Population	signature:() const
Population::toString	population.h	/^    const std::string toString() const;$/;"	p	class:Population	access:public	signature:() const
RAMP_TRAJECTORY_H	ramp_trajectory.h	2;"	d
RANGE_H	range.h	2;"	d
RampTrajectory	ramp_trajectory.cpp	/^RampTrajectory::RampTrajectory() : fitness_(-1.0), feasible_(true) {}$/;"	f	class:RampTrajectory	signature:()
RampTrajectory	ramp_trajectory.h	/^    RampTrajectory();$/;"	p	class:RampTrajectory	access:public	signature:()
RampTrajectory	ramp_trajectory.h	/^class RampTrajectory {$/;"	c
RampTrajectory::RampTrajectory	ramp_trajectory.cpp	/^RampTrajectory::RampTrajectory() : fitness_(-1.0), feasible_(true) {}$/;"	f	class:RampTrajectory	signature:()
RampTrajectory::RampTrajectory	ramp_trajectory.h	/^    RampTrajectory();$/;"	p	class:RampTrajectory	access:public	signature:()
RampTrajectory::feasible_	ramp_trajectory.h	/^    bool feasible_;$/;"	m	class:RampTrajectory	access:public
RampTrajectory::fitnessFeasibleToString	ramp_trajectory.cpp	/^const std::string RampTrajectory::fitnessFeasibleToString() const {$/;"	f	class:RampTrajectory	signature:() const
RampTrajectory::fitnessFeasibleToString	ramp_trajectory.h	/^    const std::string fitnessFeasibleToString() const;$/;"	p	class:RampTrajectory	access:public	signature:() const
RampTrajectory::fitness_	ramp_trajectory.h	/^    double fitness_;$/;"	m	class:RampTrajectory	access:public
RampTrajectory::getPath	ramp_trajectory.cpp	/^const Path RampTrajectory::getPath() const {$/;"	f	class:RampTrajectory	signature:() const
RampTrajectory::getPath	ramp_trajectory.h	/^    const Path getPath() const;$/;"	p	class:RampTrajectory	access:public	signature:() const
RampTrajectory::msg_trajec_	ramp_trajectory.h	/^    ramp_msgs::Trajectory msg_trajec_;$/;"	m	class:RampTrajectory	access:public
RampTrajectory::toString	ramp_trajectory.cpp	/^const std::string RampTrajectory::toString() const {$/;"	f	class:RampTrajectory	signature:() const
RampTrajectory::toString	ramp_trajectory.h	/^    const std::string toString() const;$/;"	p	class:RampTrajectory	access:public	signature:() const
RampTrajectory::u	ramp_trajectory.h	/^    Utility u;$/;"	m	class:RampTrajectory	access:private
RampTrajectory::~RampTrajectory	ramp_trajectory.h	/^    ~RampTrajectory() {}$/;"	f	class:RampTrajectory	access:public	signature:()
Range	range.cpp	/^Range::Range() {}$/;"	f	class:Range	signature:()
Range	range.cpp	/^Range::Range(const float min, const float max) : min_(min), max_(max) {}$/;"	f	class:Range	signature:(const float min, const float max)
Range	range.cpp	/^Range::Range(ramp_msgs::Range r) {$/;"	f	class:Range	signature:(ramp_msgs::Range r)
Range	range.h	/^    Range();$/;"	p	class:Range	access:public	signature:()
Range	range.h	/^    Range(const float min, const float max);$/;"	p	class:Range	access:public	signature:(const float min, const float max)
Range	range.h	/^    Range(ramp_msgs::Range r);$/;"	p	class:Range	access:public	signature:(ramp_msgs::Range r)
Range	range.h	/^class Range {$/;"	c
Range::Range	range.cpp	/^Range::Range() {}$/;"	f	class:Range	signature:()
Range::Range	range.cpp	/^Range::Range(const float min, const float max) : min_(min), max_(max) {}$/;"	f	class:Range	signature:(const float min, const float max)
Range::Range	range.cpp	/^Range::Range(ramp_msgs::Range r) {$/;"	f	class:Range	signature:(ramp_msgs::Range r)
Range::Range	range.h	/^    Range();$/;"	p	class:Range	access:public	signature:()
Range::Range	range.h	/^    Range(const float min, const float max);$/;"	p	class:Range	access:public	signature:(const float min, const float max)
Range::Range	range.h	/^    Range(ramp_msgs::Range r);$/;"	p	class:Range	access:public	signature:(ramp_msgs::Range r)
Range::buildRangeMsg	range.cpp	/^const ramp_msgs::Range Range::buildRangeMsg() const {$/;"	f	class:Range	signature:() const
Range::buildRangeMsg	range.h	/^    const ramp_msgs::Range buildRangeMsg() const;$/;"	p	class:Range	access:public	signature:() const
Range::max_	range.h	/^    float max_;$/;"	m	class:Range	access:public
Range::min_	range.h	/^    float min_;$/;"	m	class:Range	access:public
Range::random	range.cpp	/^const float Range::random() {$/;"	f	class:Range	signature:()
Range::random	range.h	/^    const float random();$/;"	p	class:Range	access:public	signature:()
Range::~Range	range.cpp	/^Range::~Range() {}$/;"	f	class:Range	signature:()
Range::~Range	range.h	/^    ~Range();$/;"	p	class:Range	access:public	signature:()
TRAJECTORY_REQUEST_HANDLER_H	trajectory_request_handler.h	2;"	d
TrajectoryRequestHandler	trajectory_request_handler.cpp	/^TrajectoryRequestHandler::TrajectoryRequestHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:TrajectoryRequestHandler	signature:(const ros::NodeHandle& h)
TrajectoryRequestHandler	trajectory_request_handler.h	/^    TrajectoryRequestHandler(const ros::NodeHandle& h);$/;"	p	class:TrajectoryRequestHandler	access:public	signature:(const ros::NodeHandle& h)
TrajectoryRequestHandler	trajectory_request_handler.h	/^class TrajectoryRequestHandler {$/;"	c
TrajectoryRequestHandler::TrajectoryRequestHandler	trajectory_request_handler.cpp	/^TrajectoryRequestHandler::TrajectoryRequestHandler(const ros::NodeHandle& h) : handle_(h) {$/;"	f	class:TrajectoryRequestHandler	signature:(const ros::NodeHandle& h)
TrajectoryRequestHandler::TrajectoryRequestHandler	trajectory_request_handler.h	/^    TrajectoryRequestHandler(const ros::NodeHandle& h);$/;"	p	class:TrajectoryRequestHandler	access:public	signature:(const ros::NodeHandle& h)
TrajectoryRequestHandler::client_	trajectory_request_handler.h	/^    ros::ServiceClient client_;$/;"	m	class:TrajectoryRequestHandler	access:private
TrajectoryRequestHandler::handle_	trajectory_request_handler.h	/^    ros::NodeHandle  handle_; $/;"	m	class:TrajectoryRequestHandler	access:private
TrajectoryRequestHandler::request	trajectory_request_handler.cpp	/^const bool TrajectoryRequestHandler::request(ramp_msgs::TrajectoryRequest& tr) {$/;"	f	class:TrajectoryRequestHandler	signature:(ramp_msgs::TrajectoryRequest& tr)
TrajectoryRequestHandler::request	trajectory_request_handler.h	/^    const bool request(ramp_msgs::TrajectoryRequest& tr);$/;"	p	class:TrajectoryRequestHandler	access:public	signature:(ramp_msgs::TrajectoryRequest& tr)
UTILITY_H	utility.h	2;"	d
Utility	utility.cpp	/^Utility::Utility() {$/;"	f	class:Utility	signature:()
Utility	utility.h	/^    Utility();$/;"	p	class:Utility	access:public	signature:()
Utility	utility.h	/^class Utility {$/;"	c
Utility::Utility	utility.cpp	/^Utility::Utility() {$/;"	f	class:Utility	signature:()
Utility::Utility	utility.h	/^    Utility();$/;"	p	class:Utility	access:public	signature:()
Utility::standardRanges	utility.h	/^    std::vector<Range> standardRanges;$/;"	m	class:Utility	access:public
Utility::toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Path path) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Path path) const
Utility::toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Trajectory traj) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Trajectory traj) const
Utility::toString	utility.h	/^    const std::string toString(const ramp_msgs::Path path) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Path path) const
Utility::toString	utility.h	/^    const std::string toString(const ramp_msgs::Trajectory traj) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Trajectory traj) const
add	population.cpp	/^const unsigned int Population::add(const RampTrajectory rt) {$/;"	f	class:Population	signature:(const RampTrajectory rt)
add	population.h	/^    const unsigned int  add(const RampTrajectory rt);$/;"	p	class:Population	access:public	signature:(const RampTrajectory rt)
all_	path.h	/^    std::vector<Configuration> all_;$/;"	m	class:Path	access:public
bestTrajec_	planner.h	/^    RampTrajectory bestTrajec_;$/;"	m	class:Planner	access:public
buildConfigurationMsg	configuration.cpp	/^const ramp_msgs::Configuration Configuration::buildConfigurationMsg() const {$/;"	f	class:Configuration	signature:() const
buildConfigurationMsg	configuration.h	/^    const ramp_msgs::Configuration buildConfigurationMsg() const;$/;"	p	class:Configuration	access:public	signature:() const
buildEvaluationRequest	planner.cpp	/^const ramp_msgs::EvaluationRequest Planner::buildEvaluationRequest(const RampTrajectory trajec, const std::vector<unsigned int> i_segments) {$/;"	f	class:Planner	signature:(const RampTrajectory trajec, const std::vector<unsigned int> i_segments)
buildEvaluationRequest	planner.cpp	/^const ramp_msgs::EvaluationRequest Planner::buildEvaluationRequest(const unsigned int i_trajec, const std::vector<unsigned int> i_segments) {$/;"	f	class:Planner	signature:(const unsigned int i_trajec, const std::vector<unsigned int> i_segments)
buildEvaluationRequest	planner.h	/^    const ramp_msgs::EvaluationRequest buildEvaluationRequest(const RampTrajectory trajec, const std::vector<unsigned int> i_segments);$/;"	p	class:Planner	access:public	signature:(const RampTrajectory trajec, const std::vector<unsigned int> i_segments)
buildEvaluationRequest	planner.h	/^    const ramp_msgs::EvaluationRequest buildEvaluationRequest(const unsigned int i_path, const std::vector<unsigned int> i_segments);$/;"	p	class:Planner	access:public	signature:(const unsigned int i_path, const std::vector<unsigned int> i_segments)
buildModificationRequest	modifier.cpp	/^const ramp_msgs::ModificationRequest Modifier::buildModificationRequest() {$/;"	f	class:Modifier	signature:()
buildModificationRequest	modifier.h	/^    const ramp_msgs::ModificationRequest buildModificationRequest();$/;"	p	class:Modifier	access:public	signature:()
buildPathMsg	path.cpp	/^const ramp_msgs::Path Path::buildPathMsg() const {$/;"	f	class:Path	signature:() const
buildPathMsg	path.h	/^    const ramp_msgs::Path buildPathMsg() const; $/;"	p	class:Path	access:public	signature:() const
buildRangeMsg	range.cpp	/^const ramp_msgs::Range Range::buildRangeMsg() const {$/;"	f	class:Range	signature:() const
buildRangeMsg	range.h	/^    const ramp_msgs::Range buildRangeMsg() const;$/;"	p	class:Range	access:public	signature:() const
buildTrajectoryRequest	planner.cpp	/^const ramp_msgs::TrajectoryRequest Planner::buildTrajectoryRequest(const Path path, const std::vector<float> v_s, const std::vector<float> v_e ) const {$/;"	f	class:Planner	signature:(const Path path, const std::vector<float> v_s, const std::vector<float> v_e ) const
buildTrajectoryRequest	planner.cpp	/^const ramp_msgs::TrajectoryRequest Planner::buildTrajectoryRequest(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const {$/;"	f	class:Planner	signature:(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const
buildTrajectoryRequest	planner.h	/^    const ramp_msgs::TrajectoryRequest buildTrajectoryRequest(const Path path, const std::vector<float> v_s, const std::vector<float> v_e) const;$/;"	p	class:Planner	access:public	signature:(const Path path, const std::vector<float> v_s, const std::vector<float> v_e) const
buildTrajectoryRequest	planner.h	/^    const ramp_msgs::TrajectoryRequest buildTrajectoryRequest(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const;$/;"	p	class:Planner	access:public	signature:(const unsigned int i_path, const std::vector<float> v_s, const std::vector<float> v_e) const
clear	population.cpp	/^void Population::clear() { population_.clear(); }$/;"	f	class:Population	signature:()
clear	population.h	/^    void clear();$/;"	p	class:Population	access:public	signature:()
client_	evaluation_request_handler.h	/^    ros::ServiceClient client_;$/;"	m	class:EvaluationRequestHandler	access:private
client_	modification_request_handler.h	/^    ros::ServiceClient client_;$/;"	m	class:ModificationRequestHandler	access:private
client_	trajectory_request_handler.h	/^    ros::ServiceClient client_;$/;"	m	class:TrajectoryRequestHandler	access:private
compare	configuration.cpp	/^const double Configuration::compare(const Configuration& c) const {$/;"	f	class:Configuration	signature:(const Configuration& c) const
compare	configuration.h	/^    const double compare(const Configuration& c) const;$/;"	p	class:Configuration	access:public	signature:(const Configuration& c) const
controlCycleCallback	planner.cpp	/^void Planner::controlCycleCallback(const ros::TimerEvent& t) {$/;"	f	class:Planner	signature:(const ros::TimerEvent& t)
controlCycleCallback	planner.h	/^    void controlCycleCallback(const ros::TimerEvent& t);$/;"	p	class:Planner	access:public	signature:(const ros::TimerEvent& t)
controlCycle_	planner.h	/^    ros::Duration controlCycle_;$/;"	m	class:Planner	access:public
equals	configuration.cpp	/^const bool Configuration::equals(const Configuration& c) const {$/;"	f	class:Configuration	signature:(const Configuration& c) const
equals	configuration.h	/^    const bool equals(const Configuration& c) const; $/;"	p	class:Configuration	access:public	signature:(const Configuration& c) const
evaluateAndObtainBest	planner.cpp	/^const RampTrajectory Planner::evaluateAndObtainBest() {$/;"	f	class:Planner	signature:()
evaluateAndObtainBest	planner.h	/^    const RampTrajectory evaluateAndObtainBest();$/;"	p	class:Planner	access:public	signature:()
evaluatePopulation	planner.cpp	/^void Planner::evaluatePopulation() {$/;"	f	class:Planner	signature:()
evaluatePopulation	planner.h	/^    void evaluatePopulation();$/;"	p	class:Planner	access:public	signature:()
evaluateTrajectory	planner.cpp	/^void Planner::evaluateTrajectory(RampTrajectory& trajec, const std::vector<unsigned int> i_segments) {$/;"	f	class:Planner	signature:(RampTrajectory& trajec, const std::vector<unsigned int> i_segments)
evaluateTrajectory	planner.h	/^    void evaluateTrajectory(RampTrajectory& trajec, const std::vector<unsigned int> i_segments);$/;"	p	class:Planner	access:public	signature:(RampTrajectory& trajec, const std::vector<unsigned int> i_segments)
feasible_	ramp_trajectory.h	/^    bool feasible_;$/;"	m	class:RampTrajectory	access:public
findBest	population.cpp	/^const RampTrajectory Population::findBest() {$/;"	f	class:Population	signature:()
findBest	population.h	/^    const RampTrajectory findBest();$/;"	p	class:Population	access:public	signature:()
fitnessFeasibleToString	population.cpp	/^const std::string Population::fitnessFeasibleToString() const {$/;"	f	class:Population	signature:() const
fitnessFeasibleToString	population.h	/^    const std::string fitnessFeasibleToString() const;$/;"	p	class:Population	access:public	signature:() const
fitnessFeasibleToString	ramp_trajectory.cpp	/^const std::string RampTrajectory::fitnessFeasibleToString() const {$/;"	f	class:RampTrajectory	signature:() const
fitnessFeasibleToString	ramp_trajectory.h	/^    const std::string fitnessFeasibleToString() const;$/;"	p	class:RampTrajectory	access:public	signature:() const
fitness_	ramp_trajectory.h	/^    double fitness_;$/;"	m	class:RampTrajectory	access:public
generation_	planner.h	/^    unsigned int generation_;$/;"	m	class:Planner	access:private
getNewVelocities	planner.cpp	/^const std::vector< std::vector<float> > Planner::getNewVelocities(std::vector<Path> new_paths, std::vector<int> i_old) {$/;"	f	class:Planner	signature:(std::vector<Path> new_paths, std::vector<int> i_old)
getNewVelocities	planner.h	/^    const std::vector< std::vector<float> > getNewVelocities(std::vector<Path> new_path, std::vector<int> i_old);$/;"	p	class:Planner	access:private	signature:(std::vector<Path> new_path, std::vector<int> i_old)
getPath	ramp_trajectory.cpp	/^const Path RampTrajectory::getPath() const {$/;"	f	class:RampTrajectory	signature:() const
getPath	ramp_trajectory.h	/^    const Path getPath() const;$/;"	p	class:RampTrajectory	access:public	signature:() const
getStartConfiguration	planner.cpp	/^Configuration Planner::getStartConfiguration() {$/;"	f	class:Planner	signature:()
getStartConfiguration	planner.h	/^    Configuration getStartConfiguration();$/;"	p	class:Planner	access:public	signature:()
go	planner.cpp	/^ void Planner::go() {$/;"	f	class:Planner	signature:()
go	planner.h	/^    void go();$/;"	p	class:Planner	access:public	signature:()
goal_	path.h	/^    Configuration goal_;$/;"	m	class:Path	access:public
goal_	planner.h	/^    Configuration goal_;$/;"	m	class:Planner	access:public
h_control_	planner.h	/^    ControlHandler*             h_control_;$/;"	m	class:Planner	access:private
h_eval_req_	planner.h	/^    EvaluationRequestHandler*   h_eval_req_;$/;"	m	class:Planner	access:private
h_mod_req_	modifier.h	/^    ModificationRequestHandler* h_mod_req_;$/;"	m	class:Modifier	access:private
h_traj_req_	planner.h	/^    TrajectoryRequestHandler*   h_traj_req_;$/;"	m	class:Planner	access:private
handle_	control_handler.h	/^    ros::NodeHandle handle_;$/;"	m	class:ControlHandler	access:private
handle_	evaluation_request_handler.h	/^    ros::NodeHandle handle_;$/;"	m	class:EvaluationRequestHandler	access:private
handle_	modification_request_handler.h	/^    ros::NodeHandle handle_;$/;"	m	class:ModificationRequestHandler	access:private
handle_	trajectory_request_handler.h	/^    ros::NodeHandle  handle_; $/;"	m	class:TrajectoryRequestHandler	access:private
i_best	population.h	/^    unsigned int i_best;$/;"	m	class:Population	access:private
i_changed1	modifier.h	/^    int i_changed1;$/;"	m	class:Modifier	access:public
i_changed2	modifier.h	/^    int i_changed2;$/;"	m	class:Modifier	access:public
init	planner.cpp	/^void Planner::init(const ros::NodeHandle& h) {$/;"	f	class:Planner	signature:(const ros::NodeHandle& h)
init	planner.h	/^    void init(const ros::NodeHandle& h);$/;"	p	class:Planner	access:public	signature:(const ros::NodeHandle& h)
init_population	planner.cpp	/^void Planner::init_population() { $/;"	f	class:Planner	signature:()
init_population	planner.h	/^    void init_population();$/;"	p	class:Planner	access:public	signature:()
lastUpdate_	planner.h	/^    ros::Time lastUpdate_;$/;"	m	class:Planner	access:private
main	main.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
max_	range.h	/^    float max_;$/;"	m	class:Range	access:public
max_size	population.h	/^    const unsigned int max_size;$/;"	m	class:Population	access:private
min_	range.h	/^    float min_;$/;"	m	class:Range	access:public
mod_op	modifier.h	/^    unsigned int mod_op;$/;"	m	class:Modifier	access:private
modification	planner.cpp	/^void Planner::modification() {$/;"	f	class:Planner	signature:()
modification	planner.h	/^    void modification();$/;"	p	class:Planner	access:private	signature:()
modifier_	planner.h	/^    Modifier* modifier_;$/;"	m	class:Planner	access:private
modifyPath	planner.cpp	/^const std::vector<Path> Planner::modifyPath() { $/;"	f	class:Planner	signature:()
modifyPath	planner.h	/^    const std::vector<Path> modifyPath();$/;"	p	class:Planner	access:public	signature:()
modifyTrajec	planner.cpp	/^const std::vector<ModifiedTrajectory> Planner::modifyTrajec() {$/;"	f	class:Planner	signature:()
modifyTrajec	planner.h	/^    const std::vector<ModifiedTrajectory> modifyTrajec();$/;"	p	class:Planner	access:public	signature:()
msg_trajec_	ramp_trajectory.h	/^    ramp_msgs::Trajectory msg_trajec_;$/;"	m	class:RampTrajectory	access:public
mutex_start_	planner.h	/^    bool mutex_start_;$/;"	m	class:Planner	access:private
my_planner	main.cpp	/^Planner my_planner; $/;"	v
new_velocities_	modifier.h	/^    std::vector< std::vector<float> > new_velocities_;$/;"	m	class:Modifier	access:public
num_ops	modifier.h	/^    unsigned int num_ops;$/;"	m	class:Modifier	access:private
paths_	modifier.h	/^    std::vector<Path> paths_;$/;"	m	class:Modifier	access:public
paths_	planner.h	/^    std::vector<Path>                   paths_;$/;"	m	class:Planner	access:public
perform	modifier.cpp	/^const std::vector<Path> Modifier::perform() {$/;"	f	class:Modifier	signature:()
perform	modifier.h	/^    const std::vector<Path> perform();$/;"	p	class:Modifier	access:public	signature:()
populationSize_	planner.h	/^    const int populationSize_;$/;"	m	class:Planner	access:private
population_	planner.h	/^    Population population_;$/;"	m	class:Planner	access:public
population_	population.h	/^    std::vector<RampTrajectory> population_;$/;"	m	class:Population	access:public
pub_bestTrajec_	control_handler.h	/^    ros::Publisher pub_bestTrajec_;$/;"	m	class:ControlHandler	access:private
random	configuration.cpp	/^void Configuration::random() {$/;"	f	class:Configuration	signature:()
random	configuration.h	/^    void random();$/;"	p	class:Configuration	access:public	signature:()
random	range.cpp	/^const float Range::random() {$/;"	f	class:Range	signature:()
random	range.h	/^    const float random();$/;"	p	class:Range	access:public	signature:()
ranges_	configuration.h	/^    std::vector<Range> ranges_;$/;"	m	class:Configuration	access:public
ranges_	planner.h	/^    std::vector<Range> ranges_;$/;"	m	class:Planner	access:public
replaceAll	population.cpp	/^const bool Population::replaceAll(const std::vector<RampTrajectory> new_pop) {$/;"	f	class:Population	signature:(const std::vector<RampTrajectory> new_pop)
replaceAll	population.h	/^    const bool replaceAll(const std::vector<RampTrajectory> new_pop);$/;"	p	class:Population	access:public	signature:(const std::vector<RampTrajectory> new_pop)
request	evaluation_request_handler.cpp	/^const bool EvaluationRequestHandler::request(ramp_msgs::EvaluationRequest& er) {$/;"	f	class:EvaluationRequestHandler	signature:(ramp_msgs::EvaluationRequest& er)
request	evaluation_request_handler.h	/^    const bool request(ramp_msgs::EvaluationRequest& er);$/;"	p	class:EvaluationRequestHandler	access:public	signature:(ramp_msgs::EvaluationRequest& er)
request	modification_request_handler.cpp	/^const bool ModificationRequestHandler::request(ramp_msgs::ModificationRequest& mr) {$/;"	f	class:ModificationRequestHandler	signature:(ramp_msgs::ModificationRequest& mr)
request	modification_request_handler.h	/^    const bool request(ramp_msgs::ModificationRequest& mr);   $/;"	p	class:ModificationRequestHandler	access:public	signature:(ramp_msgs::ModificationRequest& mr)
request	trajectory_request_handler.cpp	/^const bool TrajectoryRequestHandler::request(ramp_msgs::TrajectoryRequest& tr) {$/;"	f	class:TrajectoryRequestHandler	signature:(ramp_msgs::TrajectoryRequest& tr)
request	trajectory_request_handler.h	/^    const bool request(ramp_msgs::TrajectoryRequest& tr);$/;"	p	class:TrajectoryRequestHandler	access:public	signature:(ramp_msgs::TrajectoryRequest& tr)
requestEvaluation	planner.cpp	/^const bool Planner::requestEvaluation(ramp_msgs::EvaluationRequest& er) {$/;"	f	class:Planner	signature:(ramp_msgs::EvaluationRequest& er)
requestEvaluation	planner.h	/^    const bool requestEvaluation(ramp_msgs::EvaluationRequest& er);$/;"	p	class:Planner	access:public	signature:(ramp_msgs::EvaluationRequest& er)
requestTrajectory	planner.cpp	/^const bool Planner::requestTrajectory(ramp_msgs::TrajectoryRequest& tr) {$/;"	f	class:Planner	signature:(ramp_msgs::TrajectoryRequest& tr)
requestTrajectory	planner.h	/^    const bool requestTrajectory(ramp_msgs::TrajectoryRequest& tr);$/;"	p	class:Planner	access:public	signature:(ramp_msgs::TrajectoryRequest& tr)
resolutionRate_	planner.h	/^    const unsigned int resolutionRate_;$/;"	m	class:Planner	access:public
send	control_handler.cpp	/^void ControlHandler::send(ramp_msgs::Trajectory bestTrajec) {$/;"	f	class:ControlHandler	signature:(ramp_msgs::Trajectory bestTrajec)
send	control_handler.h	/^    void send(ramp_msgs::Trajectory bestTrajec);$/;"	p	class:ControlHandler	access:public	signature:(ramp_msgs::Trajectory bestTrajec)
sendBest	planner.cpp	/^void Planner::sendBest() {$/;"	f	class:Planner	signature:()
sendBest	planner.h	/^    void sendBest();$/;"	p	class:Planner	access:public	signature:()
size	path.cpp	/^const unsigned int Path::size() const { return all_.size(); }$/;"	f	class:Path	signature:() const
size	path.h	/^    const unsigned int size() const;$/;"	p	class:Path	access:public	signature:() const
size	population.cpp	/^const unsigned int Population::size() const { return population_.size(); }$/;"	f	class:Population	signature:() const
size	population.h	/^    const unsigned int size() const;$/;"	p	class:Population	access:public	signature:() const
standardRanges	utility.h	/^    std::vector<Range> standardRanges;$/;"	m	class:Utility	access:public
start_	path.h	/^    Configuration start_;$/;"	m	class:Path	access:public
start_	planner.h	/^    Configuration start_;$/;"	m	class:Planner	access:public
timer_	planner.h	/^    ros::Timer timer_;$/;"	m	class:Planner	access:public
toString	configuration.cpp	/^const std::string Configuration::toString() const {$/;"	f	class:Configuration	signature:() const
toString	configuration.h	/^    const std::string toString() const;$/;"	p	class:Configuration	access:public	signature:() const
toString	path.cpp	/^const std::string Path::toString() const {$/;"	f	class:Path	signature:() const
toString	path.h	/^    const std::string toString() const;$/;"	p	class:Path	access:public	signature:() const
toString	population.cpp	/^const std::string Population::toString() const {$/;"	f	class:Population	signature:() const
toString	population.h	/^    const std::string toString() const;$/;"	p	class:Population	access:public	signature:() const
toString	ramp_trajectory.cpp	/^const std::string RampTrajectory::toString() const {$/;"	f	class:RampTrajectory	signature:() const
toString	ramp_trajectory.h	/^    const std::string toString() const;$/;"	p	class:RampTrajectory	access:public	signature:() const
toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Path path) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Path path) const
toString	utility.cpp	/^const std::string Utility::toString(const ramp_msgs::Trajectory traj) const {$/;"	f	class:Utility	signature:(const ramp_msgs::Trajectory traj) const
toString	utility.h	/^    const std::string toString(const ramp_msgs::Path path) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Path path) const
toString	utility.h	/^    const std::string toString(const ramp_msgs::Trajectory traj) const;$/;"	p	class:Utility	access:public	signature:(const ramp_msgs::Trajectory traj) const
trajec_	planner.h	/^  RampTrajectory trajec_;$/;"	m	struct:ModifiedTrajectory	access:public
u	main.cpp	/^Utility u;$/;"	v
u	modifier.h	/^    Utility u;$/;"	m	class:Modifier	access:private
u	planner.h	/^    Utility u; $/;"	m	class:Planner	access:private
u	ramp_trajectory.h	/^    Utility u;$/;"	m	class:RampTrajectory	access:private
update	modifier.cpp	/^void Modifier::update(const Path p, const unsigned int i) {$/;"	f	class:Modifier	signature:(const Path p, const unsigned int i)
update	modifier.h	/^    void update(const Path p, const unsigned int i);$/;"	p	class:Modifier	access:public	signature:(const Path p, const unsigned int i)
updateAll	modifier.cpp	/^void Modifier::updateAll(std::vector<Path> ps, std::vector< std::vector<float> > vs) {$/;"	f	class:Modifier	signature:(std::vector<Path> ps, std::vector< std::vector<float> > vs)
updateAll	modifier.h	/^    void updateAll(const std::vector<Path> ps, std::vector< std::vector<float> > vs);$/;"	p	class:Modifier	access:public	signature:(const std::vector<Path> ps, std::vector< std::vector<float> > vs)
updateCallback	planner.cpp	/^void Planner::updateCallback(const ramp_msgs::Update::ConstPtr& msg) {$/;"	f	class:Planner	signature:(const ramp_msgs::Update::ConstPtr& msg)
updateCallback	planner.h	/^    void updateCallback(const ramp_msgs::Update::ConstPtr& msg);$/;"	p	class:Planner	access:public	signature:(const ramp_msgs::Update::ConstPtr& msg)
updatePaths	planner.cpp	/^void Planner::updatePaths(Configuration start, ros::Duration dur) {$/;"	f	class:Planner	signature:(Configuration start, ros::Duration dur)
updatePaths	planner.h	/^    void updatePaths(Configuration start, ros::Duration dur);$/;"	p	class:Planner	access:private	signature:(Configuration start, ros::Duration dur)
updatePopulation	planner.cpp	/^void Planner::updatePopulation(ros::Duration d) {$/;"	f	class:Planner	signature:(ros::Duration d)
updatePopulation	planner.h	/^    void updatePopulation(ros::Duration d);$/;"	p	class:Planner	access:public	signature:(ros::Duration d)
updatePosition	configuration.cpp	/^void Configuration::updatePosition(float x, float y, float theta)$/;"	f	class:Configuration	signature:(float x, float y, float theta)
updatePosition	configuration.h	/^    void updatePosition(float x, float y, float theta);$/;"	p	class:Configuration	access:public	signature:(float x, float y, float theta)
velocities_	modifier.h	/^    std::vector< std::vector<float> > velocities_;$/;"	m	class:Modifier	access:public
velocities_	planner.h	/^    std::vector<std::vector<float> >    velocities_;$/;"	m	class:Planner	access:public
velocities_	planner.h	/^  std::vector<float> velocities_;$/;"	m	struct:ModifiedTrajectory	access:public
~Configuration	configuration.cpp	/^Configuration::~Configuration() {}$/;"	f	class:Configuration	signature:()
~Configuration	configuration.h	/^    ~Configuration();$/;"	p	class:Configuration	access:public	signature:()
~Modifier	modifier.cpp	/^Modifier::~Modifier() {$/;"	f	class:Modifier	signature:()
~Modifier	modifier.h	/^    ~Modifier();$/;"	p	class:Modifier	access:public	signature:()
~Path	path.cpp	/^Path::~Path() {}$/;"	f	class:Path	signature:()
~Path	path.h	/^    ~Path();$/;"	p	class:Path	access:public	signature:()
~Planner	planner.cpp	/^Planner::~Planner() {$/;"	f	class:Planner	signature:()
~Planner	planner.h	/^    ~Planner();$/;"	p	class:Planner	access:public	signature:()
~RampTrajectory	ramp_trajectory.h	/^    ~RampTrajectory() {}$/;"	f	class:RampTrajectory	access:public	signature:()
~Range	range.cpp	/^Range::~Range() {}$/;"	f	class:Range	signature:()
~Range	range.h	/^    ~Range();$/;"	p	class:Range	access:public	signature:()
